class Personas::PentestUsers
  attr_accessor :email_address, :school, :responsible_body, :mobile_network, :users

  def initialize(email_address:, name:, school: nil, responsible_body: nil, mobile_network: nil)
    @email_address = email_address
    @name = name
    raise ArgumentError, 'name and email_address are required' if @name.blank? || @email_address.blank?

    @email_address_parts = email_address.split('@')
    @responsible_body = responsible_body || find_responsible_body
    @school = school || find_school
    @mobile_network = mobile_network || find_mobile_network
    @users = []
  end

  def create!
    validate!
    @users << User.create!(full_name: @name + ' (school)', email_address: email_with_suffix('school'), orders_devices: true, schools: [@school])
    @users << User.create!(full_name: @name + ' (responsible_body)', email_address: email_with_suffix('rb'), orders_devices: true, responsible_body_id: @responsible_body.id)
    @users << User.create!(full_name: @name + ' (mobile_network)', email_address: email_with_suffix('mno'), orders_devices: false, mobile_network_id: @mobile_network.id)
    @users << User.create!(full_name: @name + ' (computacenter)', email_address: email_with_suffix('computacenter'), orders_devices: false, is_computacenter: true)
    @users << User.create!(full_name: @name + ' (support)', email_address: email_with_suffix('support'), orders_devices: false, is_support: true)
    @users.map(&:email_address)
  end

private

  def email_with_suffix(suffix)
    @email_address_parts.join("+#{suffix}@")
  end

  def validate!
    raise "Couldn't find an RB that's in_connectivity_pilot and has schools, and has said who will order" if @responsible_body.blank?
    raise "Couldn't find a school in #{@responsible_body.name} that can order but has not completed the welcome wizard" if @school.blank?
    raise "Couldn't find a mobile network with more than one ExtraMobileDataRequest" if @mobile_network.blank?
  end

  def find_mobile_network
    # choose the network with the most requests
    MobileNetwork.select('mobile_networks.id, brand, COUNT(*) AS req_count')
                 .joins(:extra_mobile_data_requests)
                 .group('mobile_networks.id, brand')
                 .having('count(*) > 1')
                 .order('req_count DESC')
                 .first
  end

  def find_responsible_body
    # we want a responsible_body that has schools, and is in_connectivity_pilot
    # and has specified who will order
    ResponsibleBody.where.not(who_will_order_devices: nil)
                   .where(in_connectivity_pilot: true)
                   .where('exists(SELECT schools.id from schools inner join preorder_information ON preorder_information.school_id = schools.id where responsible_body_id = responsible_bodies.id)')
                   .first
  end

  def find_school
    # we want a school on the current responsible_body who can order
    # but has not completed the school welcome wizard
    School.where(responsible_body_id: @responsible_body&.id)
          .that_can_order_now
          .joins(:preorder_information)
          .first
  end
end
