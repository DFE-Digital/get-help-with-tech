require 'rails_helper'

RSpec.describe Personas::PentestUsers do
  subject(:personas) { described_class.new(name: 'Anna Purna', email_address: 'anna.purna@example.com') }

  describe '#find_mobile_network' do
    let(:mobile_network_with_1_request) { create(:mobile_network, brand: 'test mobile network with 1 request') }
    let(:mobile_network_with_2_requests) { create(:mobile_network, brand: 'test mobile network with 2 requests') }

    before do
      create_list(:extra_mobile_data_request, 1, mobile_network: mobile_network_with_1_request)
      create_list(:extra_mobile_data_request, 2, mobile_network: mobile_network_with_2_requests)
    end

    it 'returns the MobileNetwork with the most requests' do
      expect(personas.send(:find_mobile_network)).to eq(mobile_network_with_2_requests)
    end
  end

  describe '#find_responsible_body' do
    let!(:responsible_body_with_closed_schools_and_in_pilot_and_has_said_who_will_order) { create(:local_authority, :with_schools, :in_connectivity_pilot, :manages_centrally) }
    let!(:responsible_body_with_open_schools_and_in_pilot_and_has_said_who_will_order) { create(:local_authority, :with_schools, :in_connectivity_pilot, :manages_centrally) }

    before do
      create(:local_authority)
      create(:local_authority, :with_schools, in_connectivity_pilot: false)
      create(:local_authority, :with_schools, :in_connectivity_pilot, who_will_order_devices: nil)
      responsible_body_with_closed_schools_and_in_pilot_and_has_said_who_will_order.schools.each do |school|
        school.create_preorder_information!(who_will_order_devices: 'responsible_body')
        school.update!(status: 'closed')
      end
      responsible_body_with_open_schools_and_in_pilot_and_has_said_who_will_order.schools.each do |school|
        school.create_preorder_information!(who_will_order_devices: 'responsible_body')
        school.update!(status: 'open')
      end
    end

    it 'finds a responsible_body that has an open school, is in the connectivity pilot, and has said who will order' do
      expect(personas.send(:find_responsible_body)).to eq(responsible_body_with_open_schools_and_in_pilot_and_has_said_who_will_order)
    end
  end

  describe 'find school' do
    let!(:other_responsible_body) { create(:local_authority, :with_schools) }

    before do
      create(:school, :with_preorder_information, :in_lockdown, responsible_body: other_responsible_body)
      personas.responsible_body = create(:local_authority, :with_schools, :in_connectivity_pilot, :manages_centrally)
      personas.responsible_body.schools.last(2).each do  |school|
        school.update!(order_state: 'can_order', status: 'closed')
        school.create_preorder_information!(who_will_order_devices: 'responsible_body')
      end
      personas.responsible_body.schools.last.update!(status: 'open')
    end

    it 'finds an open school at the given responsible_body that can order now and has a preorder_information' do
      expect(personas.send(:find_school)).to eq(personas.responsible_body.schools.last)
    end
  end

  describe '#email_with_suffix' do
    it 'appends the given suffix to the local part of @email_address, using the + format' do
      expect(personas.send(:email_with_suffix, 'mno')).to eq('anna.purna+mno@example.com')
    end
  end

  describe '#create!' do
    before do
      personas.school = create(:school)
      personas.responsible_body = create(:local_authority)
      personas.mobile_network = create(:mobile_network)
    end

    it 'creates a mobile_network user with the right suffix' do
      expect { personas.create! }.to change { personas.mobile_network.users.count }.by(1)
      expect(personas.mobile_network.users.last.email_address).to eq('anna.purna+mno@example.com')
    end

    it 'creates a school user with the right suffix' do
      expect { personas.create! }.to change { personas.school.users.count }.by(1)
      expect(personas.school.users.last.email_address).to eq('anna.purna+school@example.com')
    end

    it 'creates a responsible_body user with the right suffix' do
      expect { personas.create! }.to change { personas.responsible_body.users.count }.by(1)
      expect(personas.responsible_body.users.last.email_address).to eq('anna.purna+rb@example.com')
    end

    it 'creates a support user with the right suffix' do
      expect { personas.create! }.to change { User.where(is_support: true).count }.by(1)
      expect(User.where(is_support: true).last.email_address).to eq('anna.purna+support@example.com')
    end

    it 'creates a computacenter user with the right suffix' do
      expect { personas.create! }.to change { User.where(is_computacenter: true).count }.by(1)
      expect(User.where(is_computacenter: true).last.email_address).to eq('anna.purna+computacenter@example.com')
    end
  end
end
